@extends('template.default')
@section('more-content')
    <div class="wizard-container">
        <div class="card wizard-card" data-color="red">
            <a href="{{ route('events.list') }}" class="btn btn-primary btn-just-icon btn-round btn-back">
                <i class="material-icons">arrow_back</i>
            </a>

            @switch($original_status)
                @case(\App\Models\Event::ACTIVE_STATUS)
                    <small class="label label-success label-status">@lang('events.status.active')</small>
                @break

                @case(\App\Models\Event::INACTIVE_STATUS)
                    <small class="label label-warning label-status">@lang('events.status.inactive')</small>
                @break

                @case(\App\Models\Event::DRAFT_STATUS)
                    <small class="label label-gray label-status">@lang('events.status.draft')</small>
                @break

                @case(\App\Models\Event::CLOSED_STATUS)
                    <small class="label label-purple label-status">@lang('events.status.closed')</small>
                @break

                @case(\App\Models\Event::REALIZED_STATUS)
                    <small class="label label-blue label-status">@lang('events.status.realized')</small>
                @break

                @case(\App\Models\Event::CANCELLED_STATUS)
                    <small class="label label-danger label-status">@lang('events.status.cancelled')</small>
                @break

                @default
            @endswitch
            <form action="{{ route('events.create') }}" method="post" id="form-event" enctype="multipart/form-data">
                @csrf

                <input type="hidden" name="original_status" id="original_status" value="{{ $original_status }}">

                <div class="wizard-header">
                    <h3 class="wizard-title">
                        @lang('events.create.title')
                    </h3>
                    <h5>@lang('events.create.bigger-title')</h5>
                </div>

                <div class="wizard-navigation">
                    <ul id="tab-list" class="list-group bg-light text-dark d-flex justify-content-center">
                        <li id="event" class="list-group-item text-center">
                            <a class="list-link" href="#event-data" data-toggle="tab">
                                <i class="material-icons icon icon-default">info_outline</i>
                                EVENTO
                            </a>
                        </li>
                        @foreach ($classes as $member_class)
                            <li class="list-group-item text-center">
                                <a class="list-link" href="#event-class-{{ $member_class['label'] }}" data-toggle="tab">
                                    <i class="material-icons" style="color: {{ $member_class['color'] }}">emoji_events</i>
                                    {{ $member_class['name'] }}
                                </a>
                            </li>
                        @endforeach
                        <li class="list-group-item text-center">
                            <a id="status" class="list-link" href="#philanthropy-tab" data-toggle="tab">
                                <i class="material-icons icon-default">accessibility</i>
                                FILANTROPIA
                            </a>
                        </li>
                        <li class="list-group-item text-center">
                            <a id="status" class="list-link" href="#status-tab" data-toggle="tab">
                                <i class="material-icons icon-default">bar_chart</i>
                                STATUS
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="tab-content">
                    @include('events.tabs.event-data')

                    @foreach ($classes as $member_class)
                        @include('events.tabs.class-data')
                    @endforeach
                    @include('events.tabs.philanthropy')
                    @include('events.tabs.status')

                    <div id="return" class="text-left">
                        <a href="" class="btn btn-primary btn-outline text-center" id="previous-tab-button">
                            <i class="material-icons">arrow_back_ios</i>@lang('events.btn-previous')
                        </a>
                    </div>

                    <div id="next-btn" class="text-right">
                        <a href="" class="btn btn-primary btn-outline" id="next-tab-button">@lang('events.btn-next') <i
                                class="material-icons">arrow_forward_ios</i>
                        </a>
                    </div>

                    <div id="finalize" class="text-right status-tab">
                        <button class="btn btn-primary btn-outline" type="submit">@lang('events.btn-finish')</span>
                        </button>
                    </div>
                </div>

                <div class="wizard-footer">
                    <div class="col-sm-12 pull-right text-right">

                        @if (
                            !$event ||
                                ($event && $event['status'] == \App\Models\Event::DRAFT_STATUS) ||
                                !is_array($event) ||
                                !isset($event['status']) ||
                                $original_status == \App\Models\Event::DRAFT_STATUS)
                            <button type='button' class='btn btn-finish btn-fill btn-secondary btn-wd'
                                id="btn-save-draft">Salvar rascunho</button>
                            <button type='button' class='btn btn-finish btn-fill btn-primary btn-wd'
                                id="btn-save-active">Salvar e ativar</button>
                        @elseif($event && !in_array($event['status'], [\App\Models\Event::REALIZED_STATUS, \App\Models\Event::CANCELLED_STATUS]))
                            <button type='submit' class='btn btn-finish btn-fill btn-primary btn-wd'
                                id="btn-save">@lang('events.btn-finish')</button>
                        @endif
                    </div>
                </div>

                <div class="clearfix"></div>
            </form>
        </div>
        {{-- @include('template.loading.wizard') --}}
    </div>
@endsection

@section('free-content')
    @include('events.status.resume')
    <div class="modal fade" tabindex="-1" role="dialog" id="address-modal">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                            aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">{{ __('administrators.address.modal.title') }}</h4>
                </div>

                <div class="modal-body">

                    <div class="row">
                        {{-- Zip Code --}}
                        <div class="col-sm-4">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">location_on</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.zip-code')
                                        <small>(@lang('general.required'))</small></label>
                                    <input name="address_zip_code" id="address_zip_code" type="text"
                                        class="form-control cep" maxlength="10" onblur="findAddressByCep()" required />
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-2 col-loading" style="display: none">
                            <i class="fa fa-circle-o-notch fa-spin fa-fw"></i>
                        </div>

                        <div class="col-sm-4 col-cep-not-found" style="display: none">
                            <small class="error">@lang('administrators.address.modal.cep-not-found')</small>
                        </div>
                    </div>

                    <div class="row">
                        {{-- State --}}
                        <div class="col-sm-5">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">map</i>
                                </span>
                                <div class="form-group form-group-state label-floating is-focused">
                                    {{-- <label class="control-label">@lang('administrators.address.modal.form.state') <small>(@lang('general.required'))</small></label> --}}
                                    <select name="address_state" id="address_state" class="selectpicker"
                                        data-live-search="true" data-live-search-normalize="true"
                                        data-style="select-with-transition" data-title="@lang('administrators.address.modal.form.state')">
                                        @foreach ($available_states as $i_state => $state)
                                            <option data-tokens="{{ strtolower($i_state) }}" value="{{ $i_state }}">
                                                {{ $state }}</option>
                                        @endforeach
                                    </select>
                                </div>
                            </div>
                        </div>

                        {{-- City --}}
                        <div class="col-sm-6">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">location_city</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.city')
                                        <small>(@lang('general.required'))</small></label>
                                    <input name="address_city" id="address_city" type="text" class="form-control"
                                        maxlength="30" required />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        {{-- Neighborhood --}}
                        <div class="col-sm-7">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">scatter_plot</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.neighborhood')
                                        <small>(@lang('general.required'))</small></label>
                                    <input name="address_neighborhood" id="address_neighborhood" type="text"
                                        class="form-control" maxlength="30" required />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        {{-- Street address --}}
                        <div class="col-sm-8">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">edit_road</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.street_address')
                                        <small>(@lang('general.required'))</small></label>
                                    <input name="address_street" id="address_street" type="text" class="form-control"
                                        maxlength="50" required />
                                </div>
                            </div>
                        </div>

                        {{-- Number --}}
                        <div class="col-sm-3">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">looks_one</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.number')
                                        <small>(@lang('general.required'))</small></label>
                                    <input name="address_number" id="address_number" type="text"
                                        class="form-control uppercase" maxlength="5" required />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        {{-- Complement --}}
                        <div class="col-sm-11">
                            <div class="input-group">
                                <span class="input-group-addon">
                                    <i class="material-icons">filter_9_plus</i>
                                </span>
                                <div class="form-group label-floating">
                                    <label class="control-label">@lang('administrators.address.modal.form.complement')</label>
                                    <input name="address_complement" id="address_complement" type="text"
                                        class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <div class="loading" style="display: none">
                        <i class="fa fa-circle-o-notch fa-spin fa-fw"></i>
                    </div>

                    <button type="button" class="btn btn-default"
                        data-dismiss="modal">{{ __('general.cancel') }}</button>
                    <button type="button" class="btn btn-primary" id="btn-save-address"
                        onclick="saveAddress()">{{ __('general.save') }}</button>
                </div>
            </div>
        </div>
    </div>
    @include('events.modal.members-modal')
@endsection

@section('script')
    <script type="text/javascript">
       function validationMandatoryFields() {
            let invalidField = '';
            const name = $("#name").val();
            const description = $("#description").val();
            const meetingPoint = $("#meeting_point").val();
            const dateBegin = $("#date_begin").val();
            const dateLimit = $("#date_limit").val();
            const startTime = $("#start_time").val();
            const endTime = $("#end_time").val();
            const maxVehicles = $("#max_vehicles").val();
            const maxParticipants = $("#max_participants").val();
            const maxCompanions = $("#max_companions").val();
            const unsubscribeDateLimit = $("#unsubscribe_date_limit").val();
            const retentionValue = $("#retention_value").val();

            if (name.trim() == '') {
                invalidField = 'Nome';
            } else if (description.trim() == '') {
                invalidField = 'Descrição';
            } else if (meetingPoint.trim() == '') {
                invalidField = 'Ponto de encontro';
            } else if (dateBegin.trim() == '') {
                invalidField = 'Data de início';
            } else if (dateLimit.trim() == '') {
                invalidField = 'Data limite';
            } else if (startTime.trim() == '') {
                invalidField = 'Hora de início';
            } else if (endTime.trim() == '') {
                invalidField = 'Hora de término';
            } else if (maxVehicles.trim() == '') {
                invalidField = 'Número máximo de veículos';
            } else if (maxParticipants.trim() == '') {
                invalidField = 'Número máximo de participantes';
            } else if (maxCompanions.trim() == '') {
                invalidField = 'Número máximo de acompanhantes';
            } else if (unsubscribeDateLimit.trim() == '') {
                invalidField = 'Data limite para cancelamento';
            } else if (retentionValue.trim() == '') {
                invalidField = 'Valor de retenção';
            }

            if (invalidField !== '') {
                swal.fire({
                    title: 'Atenção',
                    text: 'Campo inválido: ' + invalidField,
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
                return false;
            } else {
                return true;
            }
        }

        $('#next-btn').on('click', function() {
            if (!validationMandatoryFields()) {
                return false;
            }
        });

        $(document).on('change', '.file-cover', function() {
            var preview = $(this).data('preview');
            if (this.files && this.files[0]) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    $(preview).attr('src', e.target.result);
                }
                reader.readAsDataURL(this.files[0]);
            }
        });

        $(document).on('click', '.btn-remove-picture', function() {
            $('#preview-cover-img').attr('src', '{{ asset('images/icons/add-cover-icon.png') }}' + '?' + new Date()
                .getTime());
            $('#remove_cover_picture').val('true');
            $('#cover_picture').val('');
        });

        $(document).on('click', '.btn-undo-remove-picture', function() {
            var lastImage = $('#preview-cover-img').attr('data-last-image');
            if (lastImage) {
                $('#preview-cover-img').attr('src', lastImage);
                $('#remove_cover_picture').val('false');
            }
        });

        $(document).ready(function() {
            $(".moving-tab").remove();
        });

        $('#cover_picture').change(function() {
            $('#remove_cover_picture').val('false');
            readURL(this, '#preview-cover-img');
        });

        function readURL(input, img_id) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function(e) {
                    $(img_id).attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $(document).ready(function() {
            $('#name').on('input', function() {
                var input = $(this);
                var regex = /^[a-zA-Z\u00C0-\u00FF ]+$/;
                var is_name = regex.test(input.val());
                if (!is_name) {
                    input.val(input.val().substr(0, input.val().length - 1));
                }
            });
            $('#meeting_point').on('input', function() {
                var input = $(this);
                var regex = /^[a-zA-Z\u00C0-\u00FF ]+$/;
                var is_description = regex.test(input.val());
                if (!is_description) {
                    input.val(input.val().substr(0, input.val().length - 1));
                }
            });
            $('#description').on('input', function() {
                var input = $(this);
                var regex = /^[a-zA-Z\u00C0-\u00FF ]+$/;
                var is_description = regex.test(input.val());
                if (!is_description) {
                    input.val(input.val().substr(0, input.val().length - 1));
                }
            });

            $("#retention_value").on("input", function() {
                $(this).mask('#.###.##0,00', {
                    reverse: true
                });
            });

            $("#charity_value").on("input", function() {
                $(this).mask('#.###.##0,00', {
                    reverse: true
                });
            });

        });

        $(function() {
            $('.input-date').mask('99/99/9999');
        });

        $(document).ready(function() {
            $('a.list-link').on('click', function(e) {
                e.preventDefault();

                let invalidField = '';
                const name = $("#name").val();
                const description = $("#description").val();
                const meetingPoint = $("#meeting_point").val();
                const dateBegin = $("#date_begin").val();
                const dateLimit = $("#date_limit").val();
                const startTime = $("#start_time").val();
                const endTime = $("#end_time").val();
                const maxVehicles = $("#max_vehicles").val();
                const maxParticipants = $("#max_participants").val();
                const maxCompanions = $("#max_companions").val();
                const unsubscribeDateLimit = $("#unsubscribe_date_limit").val();
                const retentionValue = $("#retention_value").val();

                if (name.trim() == '') {
                    invalidField = 'Nome';
                } else if (description.trim() == '') {
                    invalidField = 'Descrição';
                } else if ($("#address_zip_code").val() == '') {
                    invalidField = 'CEP';
                } else if ($("#address_state").val() == '') {
                    invalidField = 'Estado';
                } else if ($("#address_city").val() == '') {
                    invalidField = 'Cidade';
                } else if ($("#address_street").val() == '') {
                    invalidField = 'Logradouro';
                } else if ($("#address_number").val() == '') {
                    invalidField = 'Número';
                } else if (meetingPoint.trim() == '') {
                    invalidField = 'Ponto de encontro';
                } else if (dateBegin.trim() == '') {
                    invalidField = 'Data de início';
                } else if (dateLimit.trim() == '') {
                    invalidField = 'Data limite';
                } else if (startTime.trim() == '') {
                    invalidField = 'Hora de início';
                } else if (endTime.trim() == '') {
                    invalidField = 'Hora de término';
                } else if (maxVehicles.trim() == '') {
                    invalidField = 'Número máximo de veículos';
                } else if (maxParticipants.trim() == '') {
                    invalidField = 'Número máximo de participantes';
                } else if (maxCompanions.trim() == '') {
                    invalidField = 'Número máximo de acompanhantes';
                } else if (unsubscribeDateLimit.trim() == '') {
                    invalidField = 'Data limite para cancelamento';
                } else if (retentionValue.trim() == '') {
                    invalidField = 'Valor de retenção';
                }

                if (invalidField != '') {
                    swal.fire({
                        title: 'Atenção',
                        text: 'Campo inválido: ' + invalidField,
                        icon: 'warning',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                    return false;
                }

                var allFieldsFilled = true;
                $('input[required], select[required]').each(function() {
                    if ($(this).val() === '') {
                        allFieldsFilled = false;
                    }
                });
            });
        });

        function validateDates() {
            var dateBegin = $('#date_begin').val().split('/').reverse().join('-');
            var dateLimit = $('#date_limit').val().split('/').reverse().join('-');

            if (new Date(dateLimit) < new Date(dateBegin)) {
                swal.fire({
                    title: 'Atenção',
                    text: 'A data de término não pode ser anterior à data de início',
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });

                $('#date_limit').val('');
            } else if (new Date(dateBegin) > new Date(dateLimit)) {
                swal.fire({
                    title: 'Atenção',
                    text: 'A data de início não pode ser posterior à data de término',
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });

                $('#date_begin').val('');
            }
        }

        $('#date_begin, #date_limit, #unsubscribe_date_limit, #start_subscription_date').on('blur', function() {
            var unsubscribe_date_limit = $('#unsubscribe_date_limit').val().split('/').reverse().join('-');
            var dateBegin = $('#date_begin').val().split('/').reverse().join('-');
            var dateLimit = $('#date_limit').val().split('/').reverse().join('-');
            var startSubscriptionDate = $('#start_subscription_date').val().split('/').reverse().join('-');

            var hasError = false;
            var errorMessage = '';

            if (dateBegin && dateLimit) {
                if (new Date(dateLimit) > new Date(dateBegin)) {
                    hasError = true;
                    errorMessage = 'A data de inscrição não pode ser posterior à data de início';
                    $('#date_limit').val('');
                } else if (new Date(dateBegin) < new Date(dateLimit)) {
                    hasError = true;
                    errorMessage = 'A data de inscrição não pode ser anterior à data de término';
                    $('#date_begin').val('');
                }
            }

            if (unsubscribe_date_limit && dateBegin && dateLimit) {
                if (new Date(unsubscribe_date_limit) < new Date(dateLimit) || new Date(unsubscribe_date_limit) >
                    new Date(dateBegin)) {
                    hasError = true;
                    errorMessage =
                        'A data limite de cancelamento deve estar entre as datas de término e início da inscrição';
                    $('#unsubscribe_date_limit').val('');
                }
            }

            if (startSubscriptionDate && dateBegin) {
                if (new Date(startSubscriptionDate) > new Date(dateBegin)) {
                    hasError = true;
                    errorMessage =
                        'A data de início da inscrição não pode ser posterior à data de início do evento';
                    $('#start_subscription_date').val('');
                }
            }

            if (hasError) {
                swal.fire({
                    title: 'Atenção',
                    text: errorMessage,
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
            }
        });

        let items = document.getElementsByClassName('list-group-item');

        let tabs = document.querySelectorAll('.nav-tabs .nav-link');
        tabs.forEach(function(tab) {
            tab.addEventListener('click', function() {
                let tabId = this.getAttribute('href').slice(1);
                let items = document.querySelectorAll('.item');
                items.forEach(function(item) {
                    item.classList.remove('active');
                    if (item.id === tabId) {
                        item.classList.add('active');
                    }
                });
            });
        });

        const statusTab = document.getElementById("status");
        statusTab.addEventListener("click", function() {
            $('#return')[0].style.display = 'inline-block';
            $('#finalize')[0].style.display = 'inline-block';
            $('#next-btn')[0].style.display = 'none';
        });

        const firstTab = document.querySelector("#tab-list li:first-child");
        firstTab.addEventListener("click", function() {
            $('#return')[0].style.display = 'none';
            $('#finalize')[0].style.display = 'none';
            $('#next-btn')[0].style.display = 'inline-block';
        });

        // Esse trecho de código pega todas as tabs disponíveis e verifica qual é a próxima para ser exibida. Após o href ser clicado, ele irá alterar para a próxima tab
        $(document).ready(function() {
            $("#event").addClass("active");
            $("#event-data").addClass("active");

            $("#next-tab-button").click(function(e) {
                e.preventDefault();

                let invalidField = '';
                const name = $("#name").val();
                const description = $("#description").val();
                const meetingPoint = $("#meeting_point").val();
                const dateBegin = $("#date_begin").val();
                const dateLimit = $("#date_limit").val();
                const startTime = $("#start_time").val();
                const endTime = $("#end_time").val();
                const maxVehicles = $("#max_vehicles").val();
                const maxParticipants = $("#max_participants").val();
                const maxCompanions = $("#max_companions").val();
                const unsubscribeDateLimit = $("#unsubscribe_date_limit").val();
                const retentionValue = $("#retention_value").val();

                if (name.trim() == '') {
                    invalidField = 'Nome';
                } else if (description.trim() == '') {
                    invalidField = 'Descrição';
                } else if ($("#address_zip_code").val() == '') {
                    invalidField = 'CEP';
                } else if ($("#address_state").val() == '') {
                    invalidField = 'Estado';
                } else if ($("#address_city").val() == '') {
                    invalidField = 'Cidade';
                } else if ($("#address_street").val() == '') {
                    invalidField = 'Logradouro';
                } else if ($("#address_number").val() == '') {
                    invalidField = 'Número';
                } else if (meetingPoint.trim() == '') {
                    invalidField = 'Ponto de encontro';
                } else if (dateBegin.trim() == '') {
                    invalidField = 'Data de início';
                } else if (dateLimit.trim() == '') {
                    invalidField = 'Data limite';
                } else if (startTime.trim() == '') {
                    invalidField = 'Hora de início';
                } else if (endTime.trim() == '') {
                    invalidField = 'Hora de término';
                } else if (maxVehicles.trim() == '') {
                    invalidField = 'Número máximo de veículos';
                } else if (maxParticipants.trim() == '') {
                    invalidField = 'Número máximo de participantes';
                } else if (maxCompanions.trim() == '') {
                    invalidField = 'Número máximo de acompanhantes';
                } else if (unsubscribeDateLimit.trim() == '') {
                    invalidField = 'Data limite para cancelamento';
                } else if (retentionValue.trim() == '') {
                    invalidField = 'Valor de retenção';
                }

                if (invalidField != '') {
                    swal.fire({
                        title: 'Atenção',
                        text: 'Campo inválido: ' + invalidField,
                        icon: 'warning',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                    return false;
                }

                let currentTab = $(".tab-pane.active");
                let nextTab = currentTab.next(".tab-pane");

                if (nextTab.length == 0) {
                    nextTab = $(".tab-pane").first();
                }

                currentTab.removeClass("active");
                nextTab.addClass("active");

                if (nextTab[0].classList.contains('active') && nextTab[0]['id'] === 'status-tab') {
                    $('#finalize')[0].style.display = 'inline-block';
                    $('#next-btn')[0].style.display = 'none';
                } else {
                    $('#finalize')[0].style.display = 'none';
                }

                if (items[0].classList.contains('active')) {
                    $('#return')[0].style.display = 'none';
                } else {
                    $('#return')[0].style.display = 'inline-block';
                }

                // Verifica se todos os campos obrigatórios foram preenchidos corretamente
                var allFieldsValid = true;
                $('input[required], select[required]').each(function() {
                    if (!this.checkValidity()) {
                        allFieldsValid = false;
                    }
                });

                // Atualiza a lista de navegação se todos os campos foram preenchidos corretamente
                if (allFieldsValid) {
                    let currentNav = $(".list-group-item.active");
                    let nextNav = currentNav.next(".list-group-item");

                    if (nextNav.length == 0) {
                        nextNav = $(".list-group-item").first();
                    }

                    currentNav.removeClass('active');
                    nextNav.addClass('active');
                }
            });
        });

        // pega todas as tabs disponíveis e verifica qual é a anterior para ser exibida. Após o href ser clicado, ele irá alterar para a tab anterior
        $(document).ready(function() {
            $("#previous-tab-button").click(function(e) {
                e.preventDefault();
                let currentTab = $(".tab-pane.active");
                let previousTab = currentTab.prev(".tab-pane");

                if (previousTab.length == 0) {
                    previousTab = $(".tab-pane").last();
                }

                currentTab.removeClass("active");
                previousTab.addClass("active");

                if (items[items.length - 1].classList.contains('active')) {
                    $('#finalize')[0].style.display = 'inline-block';
                } else {
                    $('#finalize')[0].style.display = 'none';
                    $('#next-btn')[0].style.display = 'inline-block';
                }

                if (items[0].classList.contains('active')) {
                    $('#return')[0].style.display = 'none';
                } else {
                    $('#return')[0].style.display = 'inline-block';
                }

            });
        });

        // adiciona a classe active a todo item anterior que será exibido para o usuário, ou seja, a mesma ação da função anterior, porém, para os itens anteriores na lista
        $("#previous-tab-button").click(function(e) {
            e.preventDefault();
            let currentTab = $(".list-group-item.active");
            let previousTab = currentTab.prev(".list-group-item");

            if (previousTab.length == 0) {
                previousTab = $(".list-group-item").last();
            }

            currentTab.removeClass("active");
            previousTab.addClass("active");
        });

        let class_columns = [
            @foreach ($classes_keys as $class_key)
                '{{ $class_key }}',
            @endforeach
        ];

        $(document).ready(function() {
            makeWizard('.wizard-card', {
                'animation': 'fade',
                'onTabClick': function() {
                    if (!$("#name").val()) {
                        $("#name").focus();
                    }
                }
            });
        });

        /**
         * Change cover picture
         */
        $(".input-group-cover").on('click', function() {
            $("#cover_picture").click();
        });

        /**
         * Resume modal
         */
        $(".view-resume").on('click', function() {
            let resume = $(this).attr('data-resume');
            let tables = ['event', 'class'];
            let ignore_fields = ['id', 'created_by', 'created_at', 'updated_at'];
            let fields_date = ['date', 'date_limit', 'start_subscription_date', 'unsubscribe_date_limit'];

            let exists_value = false;

            $("#table-resume").find('tbody').html('');

            if (resume) {
                resume = JSON.parse(resume);
            } else {
                resume = false;
            }

            if (resume) {
                $(tables).each(function(i_table, table) {
                    if (resume[table] && Object.keys(resume[table]).length > 0) {
                        let this_resume = resume[table];

                        $(this_resume).each(function(i_resume_fields, resume_fields) {
                            let field_keys = Object.keys(resume_fields);

                            if (table == 'class') {
                                $(field_keys).each(function(i_class_key, v_class) {
                                    if (this_resume[v_class]) {
                                        $(this_resume[v_class]).each(function(i_class_data,
                                            class_data) {
                                            $(class_data).each(function(
                                                i_class_field_keys,
                                                class_field_keys) {

                                                /**
                                                 * Get keys of class history
                                                 */
                                                $(Object.keys(
                                                    class_field_keys
                                                )).each(function(
                                                    i_class_field_key,
                                                    class_field_key
                                                ) {
                                                    let class_field_value =
                                                        class_field_keys[
                                                            class_field_key
                                                        ];
                                                    let class_field_key_lang =
                                                        Lang.get(
                                                            'events.form.class.' +
                                                            class_field_key
                                                        );

                                                    if (ignore_fields
                                                        .indexOf(
                                                            class_field_key
                                                        ) !== -1
                                                    ) {
                                                        return true; // Continue
                                                    }

                                                    exists_value =
                                                        true;

                                                    var line = $(
                                                        "<tr></tr>"
                                                    );

                                                    // var field_value = resume_fields[table][class_data][class_field_key];
                                                    var old_field_value =
                                                        "-";


                                                    if (resume[
                                                            'old_' +
                                                            table
                                                        ] &&
                                                        resume[
                                                            'old_' +
                                                            table][
                                                            v_class
                                                        ] && resume[
                                                            'old_' +
                                                            table][
                                                            v_class
                                                        ][
                                                            class_field_key
                                                        ]
                                                    ) {
                                                        old_field_value
                                                            =
                                                            resume[
                                                                'old_' +
                                                                table
                                                            ][
                                                                v_class
                                                            ][
                                                                class_field_key
                                                            ];
                                                    }

                                                    if (fields_date
                                                        .indexOf(
                                                            class_field_key
                                                        ) !== -1
                                                    ) {
                                                        old_field_value
                                                            =
                                                            dateDatabaseToBr(
                                                                old_field_value
                                                            );
                                                        class_field_value
                                                            =
                                                            dateDatabaseToBr(
                                                                class_field_value
                                                            );
                                                    }

                                                    if (class_field_key ==
                                                        'active') {
                                                        console.log(
                                                            old_field_value
                                                        );
                                                        old_field_value
                                                            = (old_field_value ==
                                                                'true' ||
                                                                old_field_value ==
                                                                true
                                                            ) ?
                                                            Lang
                                                            .get(
                                                                'general.active'
                                                            ) :
                                                            Lang
                                                            .get(
                                                                'general.inactive'
                                                            );
                                                        class_field_value
                                                            = (class_field_value ==
                                                                'true' ||
                                                                class_field_value ==
                                                                true
                                                            ) ?
                                                            Lang
                                                            .get(
                                                                'general.active'
                                                            ) :
                                                            Lang
                                                            .get(
                                                                'general.inactive'
                                                            );
                                                    }

                                                    if (
                                                        class_field_value
                                                    ) {
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    `<i class="material-icons icon-` +
                                                                    v_class +
                                                                    `">emoji_events</i> ` +
                                                                    class_field_key_lang
                                                                )
                                                            );
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    old_field_value
                                                                )
                                                            );
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    class_field_value
                                                                )
                                                            );

                                                        $("#table-resume")
                                                            .find(
                                                                'tbody'
                                                            )
                                                            .append(
                                                                line
                                                            );
                                                    }
                                                });
                                            })

                                        });
                                    }
                                });
                            } else {
                                $(field_keys).each(function(i_field_key, field_key) {
                                    if (ignore_fields.indexOf(field_key) !== -1) {
                                        return true; // Continue
                                    }

                                    exists_value = true;

                                    let line = $("<tr></tr>");

                                    let field_value = resume_fields[field_key];
                                    let field_key_lang = Lang.get('events.form.' +
                                        field_key);
                                    let old_field_value = "-";

                                    if (resume['old_' + table] && resume['old_' + table][
                                            field_key
                                        ]) {
                                        old_field_value = resume['old_' + table][field_key];
                                    }

                                    // Cover Picture
                                    if (field_key == 'cover_picture') {
                                        if (old_field_value && old_field_value != '-') {
                                            // old_field_value = Lang.get('events.history.removed');
                                            old_field_value = `<div class="cover-wrapper">
                                                <img src="` + old_field_value + `" class='cover-img' />
                                            </div>`
                                        }

                                        field_value = `
                                            <div class="cover-wrapper">
                                                <img src="` + field_value + `" class='cover-img' />
                                            </div>
                                        `;
                                    }

                                    if (fields_date.indexOf(field_key) !== -1) {
                                        old_field_value = dateDatabaseToBr(old_field_value);
                                        field_value = dateDatabaseToBr(field_value);
                                    }

                                    if (field_value) {
                                        $(line).append($("<td></td>").html(
                                            `<i class="material-icons icon-event">info_outline</i> ` +
                                            field_key_lang));
                                        $(line).append($("<td></td>").html(
                                            old_field_value));
                                        $(line).append($("<td></td>").html(field_value));

                                        $("#table-resume").find('tbody').append(line);
                                    }

                                });
                            }
                        })
                    }
                });
            }

            if (!exists_value) {
                $("#table-resume").find('tbody').append(
                    $("<td></td>", {
                        'colspan': '100%',
                        'style': "font-weight: bold; text-align: center; padding-top: 12px; font-size: 1.25em;"
                    }).html("{{ __('events.resume.no-records') }}")
                );
            }

            $("#resume-modal").modal('show');
        })

        /**
         * Change cover picture
         */
        $(".input-group-cover").on('click', function() {
            $("#cover_picture").click();
        });

        /**
         * Resume modal
         */
        $(".view-resume").on('click', function() {
            let resume = $(this).attr('data-resume');
            let tables = ['event', 'class'];
            let ignore_fields = ['id', 'created_by', 'created_at', 'updated_at'];
            let fields_date = ['date', 'date_limit', 'start_subscription_date', 'unsubscribe_date_limit'];

            let exists_value = false;

            $("#table-resume").find('tbody').html('');

            if (resume) {
                resume = JSON.parse(resume);
            } else {
                resume = false;
            }

            if (resume) {
                $(tables).each(function(i_table, table) {
                    if (resume[table] && Object.keys(resume[table]).length > 0) {
                        let this_resume = resume[table];

                        $(this_resume).each(function(i_resume_fields, resume_fields) {
                            let field_keys = Object.keys(resume_fields);

                            if (table == 'class') {
                                $(field_keys).each(function(i_class_key, v_class) {
                                    if (this_resume[v_class]) {
                                        $(this_resume[v_class]).each(function(i_class_data,
                                            class_data) {
                                            $(class_data).each(function(
                                                i_class_field_keys,
                                                class_field_keys) {

                                                /**
                                                 * Get keys of class history
                                                 */
                                                $(Object.keys(
                                                    class_field_keys
                                                )).each(function(
                                                    i_class_field_key,
                                                    class_field_key
                                                ) {
                                                    let class_field_value =
                                                        class_field_keys[
                                                            class_field_key
                                                        ];
                                                    let class_field_key_lang =
                                                        Lang.get(
                                                            'events.form.class.' +
                                                            class_field_key
                                                        );

                                                    if (ignore_fields
                                                        .indexOf(
                                                            class_field_key
                                                        ) !== -1
                                                    ) {
                                                        return true; // Continue
                                                    }

                                                    exists_value =
                                                        true;

                                                    var line = $(
                                                        "<tr></tr>"
                                                    );

                                                    // var field_value = resume_fields[table][class_data][class_field_key];
                                                    var old_field_value =
                                                        "-";


                                                    if (resume[
                                                            'old_' +
                                                            table
                                                        ] &&
                                                        resume[
                                                            'old_' +
                                                            table][
                                                            v_class
                                                        ] && resume[
                                                            'old_' +
                                                            table][
                                                            v_class
                                                        ][
                                                            class_field_key
                                                        ]
                                                    ) {
                                                        old_field_value
                                                            =
                                                            resume[
                                                                'old_' +
                                                                table
                                                            ][
                                                                v_class
                                                            ][
                                                                class_field_key
                                                            ];
                                                    }

                                                    if (fields_date
                                                        .indexOf(
                                                            class_field_key
                                                        ) !== -1
                                                    ) {
                                                        old_field_value
                                                            =
                                                            dateDatabaseToBr(
                                                                old_field_value
                                                            );
                                                        class_field_value
                                                            =
                                                            dateDatabaseToBr(
                                                                class_field_value
                                                            );
                                                    }

                                                    if (class_field_key ==
                                                        'active') {
                                                        console.log(
                                                            old_field_value
                                                        );
                                                        old_field_value
                                                            = (old_field_value ==
                                                                'true' ||
                                                                old_field_value ==
                                                                true
                                                            ) ?
                                                            Lang
                                                            .get(
                                                                'general.active'
                                                            ) :
                                                            Lang
                                                            .get(
                                                                'general.inactive'
                                                            );
                                                        class_field_value
                                                            = (class_field_value ==
                                                                'true' ||
                                                                class_field_value ==
                                                                true
                                                            ) ?
                                                            Lang
                                                            .get(
                                                                'general.active'
                                                            ) :
                                                            Lang
                                                            .get(
                                                                'general.inactive'
                                                            );
                                                    }

                                                    if (
                                                        class_field_value
                                                    ) {
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    `<i class="material-icons icon-` +
                                                                    v_class +
                                                                    `">emoji_events</i> ` +
                                                                    class_field_key_lang
                                                                )
                                                            );
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    old_field_value
                                                                )
                                                            );
                                                        $(line)
                                                            .append(
                                                                $(
                                                                    "<td></td>"
                                                                )
                                                                .html(
                                                                    class_field_value
                                                                )
                                                            );

                                                        $("#table-resume")
                                                            .find(
                                                                'tbody'
                                                            )
                                                            .append(
                                                                line
                                                            );
                                                    }
                                                });
                                            })

                                        });
                                    }
                                });
                            } else {
                                $(field_keys).each(function(i_field_key, field_key) {
                                    if (ignore_fields.indexOf(field_key) !== -1) {
                                        return true; // Continue
                                    }

                                    exists_value = true;

                                    let line = $("<tr></tr>");

                                    let field_value = resume_fields[field_key];
                                    let field_key_lang = Lang.get('events.form.' +
                                        field_key);
                                    let old_field_value = "-";

                                    if (resume['old_' + table] && resume['old_' + table][
                                            field_key
                                        ]) {
                                        old_field_value = resume['old_' + table][field_key];
                                    }

                                    // Cover Picture
                                    if (field_key == 'cover_picture') {
                                        if (old_field_value && old_field_value != '-') {
                                            // old_field_value = Lang.get('events.history.removed');
                                            old_field_value = `<div class="cover-wrapper">
                                                <img src="` + old_field_value + `" class='cover-img' />
                                            </div>`
                                        }

                                        field_value = `
                                            <div class="cover-wrapper">
                                                <img src="` + field_value + `" class='cover-img' />
                                            </div>
                                        `;
                                    }

                                    if (fields_date.indexOf(field_key) !== -1) {
                                        old_field_value = dateDatabaseToBr(old_field_value);
                                        field_value = dateDatabaseToBr(field_value);
                                    }

                                    if (field_value) {
                                        $(line).append($("<td></td>").html(
                                            `<i class="material-icons icon-event">info_outline</i> ` +
                                            field_key_lang));
                                        $(line).append($("<td></td>").html(
                                            old_field_value));
                                        $(line).append($("<td></td>").html(field_value));

                                        $("#table-resume").find('tbody').append(line);
                                    }

                                });
                            }
                        })
                    }
                });
            }

            if (!exists_value) {
                $("#table-resume").find('tbody').append(
                    $("<td></td>", {
                        'colspan': '100%',
                        'style': "font-weight: bold; text-align: center; padding-top: 12px; font-size: 1.25em;"
                    }).html("{{ __('events.resume.no-records') }}")
                );
            }

            $("#resume-modal").modal('show');
        })

        /**
         * Change event address
         */
        function changeEventAddress() {

            prefix = "event";

            if ($("#" + prefix + "_address_zip_code").val()) {
                $("#address_zip_code").val($("#" + prefix + "_address_zip_code").val()).change();
                $("#address_state").val($("#" + prefix + "_address_state").val()).change();
                $("#address_city").val($("#" + prefix + "_address_city").val()).change();
                $("#address_neighborhood").val($("#" + prefix + "_address_neighborhood").val()).change();
                $("#address_street").val($("#" + prefix + "_address_street_address").val()).change();
                $("#address_number").val($("#" + prefix + "_address_number").val()).change();
                $("#address_complement").val($("#" + prefix + "_address_complement").val()).change();

                $("#address_state").selectpicker('refresh');
            }

            $('#address-modal').modal('show');
        }

        function saveAddress() {
            if ($("#address_zip_code").val() == "" || $("#address_state").val() == "" || $("#address_city").val() == "" ||
                $("#address_street").val() == "" || $("#address_number").val() == "") {

                let invalidField = '';
                if ($("#address_zip_code").val() == '') {
                    invalidField = 'CEP';
                } else if ($("#address_state").val() == '') {
                    invalidField = 'Estado';
                } else if ($("#address_city").val() == '') {
                    invalidField = 'Cidade';
                } else if ($("#address_street").val() == '') {
                    invalidField = 'Logradouro';
                } else if ($("#address_number").val() == '') {
                    invalidField = 'Número';
                }

                swal.fire({
                    title: 'Atenção',
                    text: 'Campo inválido: ' + invalidField,
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            // Save the address
            const address_prefix = "event";

            $("#" + address_prefix + "_address_zip_code").val($("#address_zip_code").val());
            $("#" + address_prefix + "_address_state").val($("#address_state").val());
            $("#" + address_prefix + "_address_city").val($("#address_city").val());
            $("#" + address_prefix + "_address_neighborhood").val($("#address_neighborhood").val());
            $("#" + address_prefix + "_address_street_address").val($("#address_street").val());
            $("#" + address_prefix + "_address_number").val($("#address_number").val());
            $("#" + address_prefix + "_address_complement").val($("#address_complement").val());

            generateAddessesResume();

            $("#" + address_prefix + "-address-add-div").hide();
            $("#" + address_prefix + "-address-change-div").show();

            $("#address-modal").modal('hide');

            return false;
        }

        /**
         * Find address by cep
         * @return Object
         */
        function findAddressByCep() {
            let cep = $("#address_zip_code").val();

            if (cep.length < 9) {
                return false;
            }

            setLoadingCep(true);

            $.ajax({
                method: 'GET',
                url: "/api/service/cep/find/" + cep,
                headers: {
                    "X-CSRF-TOKEN": "{{ csrf_token() }}"
                },
            }).then((response) => {

                console.log(response);

                if (response.status == 'success') {

                    let data = response.data;

                    $("#address_state").val(data.state_initials);
                    $("#address_state").selectpicker('refresh');
                    // $("#address_state").valid();

                    $("#address_city").val(data.city);
                    $("#address_city").change();
                    // $("#address_city").valid();

                    $("#address_neighborhood").val(data.neighborhood);
                    $("#address_neighborhood").change();
                    // $("#address_neighborhood").valid();

                    $("#address_street").val(data.street_address);
                    $("#address_street").change();
                    // $("#address_street").valid();

                    if (data.complement) {
                        $("#address_complement").val(data.complement);
                        $("#address_complement").change();
                    }

                    setTimeout(function() {
                        $("#address_number").focus();
                    }, 20);
                } else {

                    $("#address_state").val('');
                    $("#address_state").selectpicker('refresh');
                    // $("#address_state").valid();

                    // $("#address_city").val('').change().valid();
                    // $("#address_neighborhood").val('').change().valid();
                    // $("#address_street").val('').change().valid();

                    $(".col-cep-not-found").fadeIn(200);
                }

                setLoadingCep(false);
            }).catch((err) => {
                setLoadingCep(false);

                $(".col-cep-not-found").fadeIn(200);
            });
        }

        /**
         * Loading cep
         */
        function setLoadingCep(loading) {
            if (loading) {
                $(".col-loading").fadeIn(250);
                $(".col-cep-not-found").fadeOut(100);
            } else {
                $(".col-loading").fadeOut(200);
            }

            $("#address_state").prop('disabled', loading);
            $("#address_city").prop('disabled', loading);
            $("#address_neighborhood").prop('disabled', loading);
            $("#address_street").prop('disabled', loading);
            $("#address_number").prop('disabled', loading);
            $("#address_complement").prop('disabled', loading);

            $("#address_state").selectpicker('refresh');
        }

        function generateAddessesResume(with_prefix) {
            let address_prefix = "event";
            let address_resume = with_prefix ? $("#" + address_prefix + "_address_street_address").val() : $(
                "#address_street").val();

            if (with_prefix) {
                if ($("#" + address_prefix + "_address_number").val()) {
                    address_resume += ", " + $("#" + address_prefix + "_address_number").val();
                }

                if ($("#" + address_prefix + "_address_complement").val()) {
                    address_resume += ", " + $("#" + address_prefix + "_address_complement").val();
                }

                address_resume += " - " + $("#" + address_prefix + "_address_neighborhood").val();
                address_resume += " - " + $("#" + address_prefix + "_address_city").val();
                address_resume += "/" + $("#" + address_prefix + "_address_state").val();
            } else {
                if ($("#address_number").val()) {
                    address_resume += ", " + $("#address_number").val();
                }

                if ($("#address_complement").val()) {
                    address_resume += ", " + $("#address_complement").val();
                }

                address_resume += " - " + $("#address_neighborhood").val();
                address_resume += " - " + $("#address_city").val();
                address_resume += "/" + $("#address_state").val();
            }

            $("#" + address_prefix + "_address_input").val(address_resume).change();
        }

        $(function() {
            $("#address-modal").on('shown.bs.modal', function() {
                $("#address_zip_code").focus();
            });

            // $("#address-modal").on('hidden.bs.modal', function(){
            //     $("#form_address")[0].reset();
            //     $("#form_address").find(".selectpicker").selectpicker('refresh');
            // });

            generateAddessesResume(true);

            /*

            $("#form_address").validate({
                rules: {
                    address_zip_code: "required",
                    address_state: "required",
                    address_city: "required",
                    address_neighborhood: "required",
                    address_street: "required"
                },
                submitHandler: function(form) {
                    // Save the address
                    const address_prefix = "event";

                    $("#" + address_prefix + "_address_zip_code").val($("#address_zip_code").val());
                    $("#" + address_prefix + "_address_state").val($("#address_state").val());
                    $("#" + address_prefix + "_address_city").val($("#address_city").val());
                    $("#" + address_prefix + "_address_neighborhood").val($("#address_neighborhood").val());
                    $("#" + address_prefix + "_address_street_address").val($("#address_street").val());
                    $("#" + address_prefix + "_address_number").val($("#address_number").val());
                    $("#" + address_prefix + "_address_complement").val($("#address_complement").val());

                    generateAddessesResume();

                    $("#" + address_prefix + "-address-add-div").hide();
                    $("#" + address_prefix + "-address-change-div").show();

                    $("#address-modal").modal('hide');

                    return false;
                }
            });

            */
        });

        function validateStartEvent(event) {
            let fields = [];

            if (!event.name) {
                fields.push('name');
            }

            if (!event.description) {
                fields.push('description');
            }

            if (!event.event_address_zip_code || !event.event_address_city || !event.event_address_neighborhood || !event
                .event_address_street_address || !event.event_address_state) {
                fields.push('address');
            }

            if (!event.meeting_point) {
                fields.push('meeting_point');
            }

            if (!event.date) {
                fields.push('date');
            }

            if (!event.name) {
                fields.push('date_limit');
            }

            if (!event.start_time) {
                fields.push('start_time');
            }

            if (!event.end_time) {
                fields.push('end_time');
            }

            if (!event.max_vehicles) {
                fields.push('max_vehicles');
            }

            if (!event.max_participants) {
                fields.push('max_participants');
            }

            if (!event.max_companions) {
                fields.push('max_companions');
            }

            if (!event.unsubscribe_date_limit) {
                fields.push('unsubscribe_date_limit');
            }

            if (!event.retention_value) {
                fields.push('retention_value');
            }

            console.log(event);

            $(class_columns).each(function(i_member_class, member_class) {
                if (!event['class_data'][member_class]) {
                    event['class_data'][member_class] = {};
                }

                if (!event['class_data'][member_class]['start_subscription_date']) {
                    fields.push('class.' + member_class + '.start_subscription_date');
                }

                if (!event['class_data'][member_class]['vehicle_value']) {
                    fields.push('class.' + member_class + '.vehicle_value');
                }

                if (!event['class_data'][member_class]['participant_value']) {
                    fields.push('class.' + member_class + '.participant_value');
                }

                if (!event['class_data'][member_class]['companion_value']) {
                    fields.push('class.' + member_class + '.companion_value');
                }
            });

            if (fields.length > 0) {
                return fields;
            }

            return false;
        }

        $("#btn-save-draft").on('click', function() {
            $("#status").val("{{ \App\Models\Event::DRAFT_STATUS }}");

            $("#form-event").submit();
        });

        $("#btn-save-active").on('click', function() {
            $("#status").val("{{ \App\Models\Event::ACTIVE_STATUS }}");

            let event = objectifyForm($("#form-event").serializeArray());
            let validate = validateStartEvent(event);

            if (validate) {
                fields = [];

                $(validate).each(function(i_field, field) {
                    if (field.indexOf('class.') !== -1) {
                        class_name = field.substr(field.indexOf('.') + 1);
                        field = class_name.substr(class_name.indexOf('.') + 1);

                        class_name = class_name.substr(0, class_name.indexOf('.'));

                        return fields.push(`<i class="material-icons icon-` + class_name +
                            `">emoji_events</i> ` + Lang.get('events.form.class.' + field));
                    }

                    fields.push(`<i class="material-icons icon-event">info_outline</i> ` + Lang.get(
                        'events.form.' + field));
                });

                return Swal.fire({
                    title: "Atenção",
                    html: `Os seguintes campos são obrigatórios para ativar o evento: <br><br><strong> ` +
                        fields.join("<br>") + '</strong>',
                    icon: 'warning',
                    showCancelButton: false,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: Lang.get('general.ok'),
                })
            }

            $("#form-event").submit();
        });

        function objectifyForm(formArray) {
            //serialize data function
            var returnArray = {};

            for (var i = 0; i < formArray.length; i++) {
                returnArray[formArray[i]['name']] = formArray[i]['value'];
            }

            Object.keys(returnArray).forEach(function(key, i_key) {
                if (key.indexOf('class[') !== -1) {
                    let member_class = key.substr(key.indexOf('['));
                    let value = key.substring(key.indexOf(']') + 2, key.length - 1);

                    member_class = member_class.substr(1, member_class.indexOf(']') - 1);

                    if (!returnArray['class_data']) {
                        returnArray['class_data'] = {};
                    }

                    if (!returnArray['class_data'][member_class]) {
                        returnArray['class_data'][member_class] = {};
                    }

                    returnArray['class_data'][member_class][value] = returnArray[key];

                    delete returnArray[key];
                }
            });

            return returnArray;
        }

        function dateDatabaseToBr(date) {
            if (date !== null && date.indexOf('-') !== -1 && date !== '-' && date !== '--') {
                date = new Date(date);

                return date.toISOString().substr(0, 10).split('-').reverse().join('/');
            }

            return date;
        }

        function getMembers() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/api/events/{{ $event && is_array($event) && isset($event['id']) ? $event['id'] : '' }}/members'
                }).then(function(response) {
                    if (response.status == 'success') {
                        resolve(response.data);
                    }

                    reject(false);
                }).catch(function(err) {
                    reject(err);
                });
            })
        }

        async function showMembersModal() {
            $("#members-modal").find('.loading').show();
            $("#members-modal").find(".table").find("tbody").html('');
            $("#members-modal").modal('show');

            let members = await getMembers();

            $("#members-modal").find(".loading").fadeOut(450);
            $("#members-modal").find(".table-members").fadeIn(450);

            let amount = 0;

            $(members).each(function(i_member, member) {
                let tr = $("<tr></tr>");
                let cpf = member.user.cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");

                tr.append("<td>" + member.user.name + "</td>");
                tr.append("<td>" + cpf + "</td>");
                tr.append("<td>" + formatPhone(member.user.phone) + "</td>");
                tr.append("<td>" + (member.vehicle ? Lang.get('general.yes') : Lang.get('no')) + "</td>");
                tr.append("<td>" + member.companions + "</td>");
                tr.append("<td>" + member.amount.formatMoney() + "</td>");

                amount += member.amount;

                $("#members-modal").find(".table-members").find("tbody").append(tr);
            });

            if (members.length <= 0) {
                let tr = $("<tr></tr>");

                tr.append('<td colspan="100%">' + Lang.get('general.no-records') + '</td>');

                $("#members-modal").find(".table-members").find("tbody").append(tr);
            }

            $(".value-participants").html(members.length);
            $(".value-amount").html(amount.formatMoney());
        }

        $("#members-modal").on('hide.bs.modal', function() {
            $("#members-modal").find('.loading').hide();
            $("#members-modal").find(".table-members").hide();
        })

        function formatPhone(tel) {
            tel = tel.replace(/\D/g, "")
            tel = tel.replace(/^(\d)/, "$1")
            tel = tel.replace(/(.{0})(\d)/, "$1($2")
            tel = tel.replace(/(.{3})(\d)/, "$1)$2")
            tel = tel.replace(/(.{4})$/, "-$1")

            return tel;
        }

        @if (!$event)
            $(function() {
                setTimeout(function() {
                    $("#name").focus();
                }, 700);
            })
        @endif
    </script>
@endsection

@section('style')
    <style type="text/css">
        .is-middle{
            margin: 0 !important;
        }

        .wizard-title {
            line-height: 1.2em !important;
        }

        .wizard-card .moving-tab {
            height: 100%;
        }

        .moving-tab {
            height: 100%;

        }

        .category-row {
            background-color: #f5f5f5;
            text-align: center;
            padding: 12px;
            border-radius: 6px;
        }

        .icon-accessibility{
            margin-top: 10px;
        }

        .margintop{
            padding-left: 0 !important;
        }

        .category-title {
            font-size: 1.42em;
            font-weight: bold;
        }

        .none-status {
            text-align: center
        }

        .col-cover {
            float: right;
        }

        .input-group-cover {
            text-align: center;
            margin: 0 auto;
            cursor: pointer;
        }

        .cover-title {
            font-weight: bold;
            display: inline-block;
            text-align: center;
            color: #666;
        }

        .cover-icon {
            display: inline-block;
            color: #666;
        }

        .cover-wrapper {
            width: 260px;
            height: 120px;
            border-radius: 4px;
            padding-left: 4px;
            margin: 0 auto;
        }

        .cover-img {
            height: 100% !important;
            width: 100% !important;
            text-align: center;
            margin: 0 auto;
            display: block;
            background-size: cover !important;
            object-fit: cover !important;
            background-repeat: no-repeat !important;
            background-position: center !important;
            opacity: 0.75;
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;

        }

        .input-group-cover:hover .cover-title,
        .input-group-cover:hover .cover-icon {
            color: #f44336
        }

        .input-group-cover:hover .cover-img {
            opacity: 0.9;
        }

        .file-cover {
            display: none !important;
        }

        #name {
            text-transform: capitalize;
        }

        /* .col-info-changes{ text-align: center; } */
        .col-info-changes .date-header,
        .col-info-changes .date-col {
            text-align: center;
        }

        img.user-photo {
            height: 30px;
            width: 30px;
            object-fit: cover;
        }

        .label-gray {
            background-color: #999
        }

        .label-purple {
            background-color: #400085;
        }

        .label-blue {
            background-color: #004cb0;
        }

        .label-orange {
            background-color: #e6851e;
        }

        .label-status {
            float: right;
            position: absolute;
            right: 18px;
            top: 14px;
        }

        .icon-resume {
            position: absolute;
            left: -6px;
            top: 0;
        }

        .box {
            width: 100%;
            height: 140px;
            background-color: #f4f4f4 !important;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 60px;
            display: block !important;
        }

        .active i {}

        .box-title {
            font-weight: bold;
            font-size: 1.32em;
            text-align: center;
            padding-top: 12px;
            color: #444;
        }

        .box-value {
            font-size: 2.1em;
            text-align: center;
            padding-top: 24px;
            color: {{ $club['primary_color'] }};
            font-weight: bold;
        }

        .box-value.box-value-green {
            color: #167530;
        }

        .box-title i {
            display: block;
        }

        .toggle-active {
            float: right;
            position: absolute;
            top: 0;
            width: 150px;
            right: 0px;
        }

        .toggle-active>label>.toggle {
            margin-left: 15px !important;
        }

        #members-modal .loading {
            text-align: center;
        }

        .icon-event {
            color: #333;
        }


        #finalize,
        #return {
            display: none;
        }

        .list-group-item {
            background-color: inherit;
            border: none;
            width: 100%;
        }

        .list-group-item.active,
        .list-group-item.active:focus,
        .list-group-item.active:hover {
            transform: translate3d(-8px, 0px, 0px);
            border-radius: 4px;
            color: white !important;
            font-weight: bold;
        }

        .list-group-item.active a,
        .list-group-item.active i {
            color: white !important;
        }

        .list-link,
        .list-link:hover {
            color: #333;
            font-weight: bold !important;
        }

        .icon-default {
            color: #333;
            margin-right: 6px;
        }

        .icon-active {
            color: white;
        }

        .text-active {
            color: white;
        }

        #tab-list {
            background-color: #F8F9FA;
            display: flex;
            justify-content center;

        }

        #next-btn {
            float: right;
        }

        /* .item.active {
                                                                                                    background-color: red;
                                                                                                }*/

        .tab-content>div:last-child {
            float: right;
        }

        .tab-content>div {
            display: inline-block;
        }

        .tab-content>div {
            margin-top: 15px;
        }

        .wizard-title {
            line-height: 1.2em !important;
        }

        .nav-pills>li>a {
            transition: unset !important;
            color: unset !important;
        }

        .wizard-card .nav-pills>li i {
            display: inline !important;
            font-size: initial !important;
        }

        .nav-pills>li li {
            transition: unset !important;
            color: unset !important;
            font-size: initial !important;

        }

        .category-row {
            background-color: #f5f5f5;
            text-align: center;
            padding: 12px;
            border-radius: 6px;
        }

        .category-title {
            font-size: 1.42em;
            font-weight: bold;
        }

        .philanthropy-label{
            margin-top: 20px !important;
        }

        .none-status {
            text-align: center
        }

        .col-cover {
            float: right;
        }

        .input-group-cover {
            text-align: center;
            margin: 0 auto;
            cursor: pointer;
        }

        .cover-title {
            font-weight: bold;
            display: inline-block;
            text-align: center;
            color: #666;
        }

        .cover-icon {
            display: inline-block;
            color: #666;
        }

        .input-group-cover:hover .cover-title,
        .input-group-cover:hover .cover-icon {
            color: #f44336
        }

        .input-group-cover:hover .cover-img {
            opacity: 0.9;
        }

        .file-cover {
            display: none !important;
        }

        #name {
            text-transform: capitalize;
        }

        /* .col-info-changes{ text-align: center; } */
        .col-info-changes .date-header,
        .col-info-changes .date-col {
            text-align: center;
        }

        img.user-photo {
            height: 30px;
            width: 30px;
            object-fit: cover;
        }

        .label-gray {
            background-color: #999
        }

        .label-purple {
            background-color: #400085;
        }

        .label-blue {
            background-color: #004cb0;
        }

        .label-orange {
            background-color: #e6851e;
        }

        .label-status {
            float: right;
            position: absolute;
            right: 18px;
            top: 14px;
        }

        .icon-resume {
            position: absolute;
            left: -6px;
            top: 0;
        }

        .box {
            width: 100%;
            height: 140px;
            background-color: #f4f4f4 !important;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 60px;
            display: block !important;
        }

        .box-title {
            font-weight: bold;
            font-size: 1.32em;
            text-align: center;
            padding-top: 12px;
            color: #444;
        }

        .box-value {
            font-size: 2.1em;
            text-align: center;
            padding-top: 24px;
            color: {{ $club['primary_color'] }};
            font-weight: bold;
        }

        .box-value.box-value-green {
            color: #167530;
        }

        .box-title i {
            display: block;
        }

        .toggle-active {
            float: right;
            position: absolute;
            top: 0;
            width: 150px;
            right: 0px;
        }

        .toggle-active>label>.toggle {
            margin-left: 15px !important;
        }

        #members-modal .loading {
            text-align: center;
        }

        .icon-event {
            color: #333;
        }

        @media print {
            body>*:not(#printSection) {
                display: none;
            }

            #printSection,
            #printSection * {
                visibility: visible;
            }

            #printSection {
                position: absolute;
                left: 0;
                top: 0;
                margin-top: 0;
            }

            .modal-footer,
            .close {
                display: none;
            }
        }

        {{-- Member class icon color  --}} @foreach ($classes as $member_class)
            .icon-{{ $member_class['label'] }} {
                color: {{ $member_class['color'] }}
            }

        @endforeach
    </style>
@endsection
